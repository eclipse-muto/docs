"use strict";(self.webpackChunkliveui_website=self.webpackChunkliveui_website||[]).push([[1673],{4137:function(e,t,n){n.d(t,{Zo:function(){return c},kt:function(){return d}});var o=n(7294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function a(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);t&&(o=o.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,o)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?a(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):a(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function p(e,t){if(null==e)return{};var n,o,r=function(e,t){if(null==e)return{};var n,o,r={},a=Object.keys(e);for(o=0;o<a.length;o++)n=a[o],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(o=0;o<a.length;o++)n=a[o],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var s=o.createContext({}),l=function(e){var t=o.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},c=function(e){var t=l(e.components);return o.createElement(s.Provider,{value:t},e.children)},m={inlineCode:"code",wrapper:function(e){var t=e.children;return o.createElement(o.Fragment,{},t)}},u=o.forwardRef((function(e,t){var n=e.components,r=e.mdxType,a=e.originalType,s=e.parentName,c=p(e,["components","mdxType","originalType","parentName"]),u=l(n),d=r,f=u["".concat(s,".").concat(d)]||u[d]||m[d]||a;return n?o.createElement(f,i(i({ref:t},c),{},{components:n})):o.createElement(f,i({ref:t},c))}));function d(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var a=n.length,i=new Array(a);i[0]=u;var p={};for(var s in t)hasOwnProperty.call(t,s)&&(p[s]=t[s]);p.originalType=e,p.mdxType="string"==typeof e?e:r,i[1]=p;for(var l=2;l<a;l++)i[l]=n[l];return o.createElement.apply(null,i)}return o.createElement.apply(null,n)}u.displayName="MDXCreateElement"},4596:function(e,t,n){n.r(t),n.d(t,{assets:function(){return c},contentTitle:function(){return s},default:function(){return d},frontMatter:function(){return p},metadata:function(){return l},toc:function(){return m}});var o=n(7462),r=n(3366),a=(n(7294),n(4137)),i=["components"],p={id:"single-codebase-react-native",title:"Single Codebase For React Native",sidebar_label:"Single Codebase For React Native",sidebar_position:2},s=void 0,l={unversionedId:"LiveUI/advanced/single-codebase-react-native",id:"LiveUI/advanced/single-codebase-react-native",title:"Single Codebase For React Native",description:"In this section, we will describe how to integrate LiveUI with your project that is currently running or developing.",source:"@site/docs/LiveUI/advanced/single-codebase-react-native.md",sourceDirName:"LiveUI/advanced",slug:"/LiveUI/advanced/single-codebase-react-native",permalink:"/docs/docs/LiveUI/advanced/single-codebase-react-native",draft:!1,editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/LiveUI/advanced/single-codebase-react-native.md",tags:[],version:"current",sidebarPosition:2,frontMatter:{id:"single-codebase-react-native",title:"Single Codebase For React Native",sidebar_label:"Single Codebase For React Native",sidebar_position:2},sidebar:"mutoSidebar",previous:{title:"Single Codebase For React",permalink:"/docs/docs/LiveUI/advanced/single-codebase-react"},next:{title:"Multiple Codebases for React",permalink:"/docs/docs/LiveUI/advanced/multiple-codebases-react"}},c={},m=[{value:"Start to configure for remote components",id:"start-to-configure-for-remote-components",level:2},{value:"Consuming Remote Components",id:"consuming-remote-components",level:2}],u={toc:m};function d(e){var t=e.components,n=(0,r.Z)(e,i);return(0,a.kt)("wrapper",(0,o.Z)({},u,n,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("p",null,"In this section, we will describe how to integrate LiveUI with your project that is currently running or developing. "),(0,a.kt)("p",null,"Let's assume we have a project structure like follows:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"simple-react-native-app\n\u251c\u2500\u2500 App.js\n\u251c\u2500\u2500 __tests__\n\u251c\u2500\u2500 android\n\u251c\u2500\u2500 app.json\n\u251c\u2500\u2500 babel.config.js\n\u251c\u2500\u2500 components\n\u2502\xa0\xa0 \u251c\u2500\u2500 Header.js\n\u2502   \u2514\u2500\u2500 Footer.js\n\u251c\u2500\u2500 index.js\n\u251c\u2500\u2500 ios\n\u251c\u2500\u2500 metro.config.js\n\u2514\u2500\u2500 package.json\n")),(0,a.kt)("p",null,(0,a.kt)("inlineCode",{parentName:"p"},"index.js")," file:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-js",metastring:'title="index.js"',title:'"index.js"'},"import {AppRegistry} from 'react-native';\nimport App from './App';\nimport {name as appName} from './app.json';\n\nAppRegistry.registerComponent(appName, () => App);\n")),(0,a.kt)("p",null,(0,a.kt)("inlineCode",{parentName:"p"},"App.js")," file:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-js",metastring:'title="App.js"',title:'"App.js"'},"import React from 'react';\nimport {View} from 'react-native';\n\nimport Header from './components/Header';\nimport Footer from './components/Footer';\n\nconst App = () => {\n  return (\n    <View>\n      <Header title=\"Hello World!\" />\n      <Footer />\n    </View>\n  );\n};\n")),(0,a.kt)("p",null,(0,a.kt)("inlineCode",{parentName:"p"},"Header.js")," file:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-js",metastring:'title="components/Header.js"',title:'"components/Header.js"'},"import React from 'react';\nimport {Text,View} from 'react-native';\n\nfunction Header(props) {\n  const { title } = props;\n\n  return (\n    <View>\n      <Text>{title}</Text>\n    </View>\n  );\n}\n\nexport default Header;\n")),(0,a.kt)("h2",{id:"start-to-configure-for-remote-components"},"Start to configure for remote components"),(0,a.kt)("p",null,"Firstly, we need to install some packages to our project for using LiveUI properly. "),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-sh"},"npm i --save-dev babel-loader css-loader file-loader html-loader image-webpack-loader style-loader svg-url-loader url-loader\n")),(0,a.kt)("p",null,"Then we need to create a LiveUI configuration file for making components remotable. You can use ",(0,a.kt)("strong",{parentName:"p"},"liveui init")," for this action."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-sh"},"liveui init\n")),(0,a.kt)("blockquote",null,(0,a.kt)("p",{parentName:"blockquote"},"You should run this command on the project's root folder. Otherwise, you need to pass ",(0,a.kt)("strong",{parentName:"p"},"--config")," parameter with your config path while you start serving remote components.")),(0,a.kt)("p",null,"After creating the configuration file you can start editing options according to your needs."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-js",metastring:'title="liveui.config.js"',title:'"liveui.config.js"'},"module.exports = {\n    shared: ['react', 'react-native'],\n    exposes: {\n        header: './components/Header.js',\n    },\n    microPort: 5001,\n    hotReloadContext: 'components',\n}\n")),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},(0,a.kt)("a",{parentName:"strong",href:"../explore#shared"},(0,a.kt)("inlineCode",{parentName:"a"},"shared")),":")," You need to define this option with some modules like libraries, components, classes, etc. In this way, remote components will try to get these values from the environment in which they run. You can think these values are shared by the host application that we will explain in the next section."),(0,a.kt)("blockquote",null,(0,a.kt)("p",{parentName:"blockquote"},(0,a.kt)("inlineCode",{parentName:"p"},"host")," is the application that consumes remote components.")),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},(0,a.kt)("a",{parentName:"strong",href:"../explore#exposes"},(0,a.kt)("inlineCode",{parentName:"a"},"exposes")),":")," Then you need to specify component names and paths as key-value pairs that will be used as remotes on this  option. The name of the component is important because of the remote component will be served using this name."),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},(0,a.kt)("a",{parentName:"strong",href:"../explore#microPort"},(0,a.kt)("inlineCode",{parentName:"a"},"microPort")),":")," In development, you can define a port that is responsible for serving your remote components."),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},(0,a.kt)("a",{parentName:"strong",href:"../explore#microPort"},(0,a.kt)("inlineCode",{parentName:"a"},"hotReloadContext")),":")," The value you defined here helps LiveUI for hot module replacement on the host application in development."),(0,a.kt)("p",null,"Our configuration is complete. Let's try to run and serve our components as a remote component."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-sh"},"npx liveui start-native\n")),(0,a.kt)("p",null,"When you run this command, LiveUI reads the config and serve the components we specified."),(0,a.kt)("p",null,"You can check your components at:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"http://localhost:5001/header\n")),(0,a.kt)("blockquote",null,(0,a.kt)("p",{parentName:"blockquote"},"Also you can see the information page at http://localhost:5001")),(0,a.kt)("h2",{id:"consuming-remote-components"},"Consuming Remote Components"),(0,a.kt)("p",null,"Let's start consuming remote components. "),(0,a.kt)("p",null,"Install the packages that are responsible for initializing LiveUI app and consuming remote components. "),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-sh"},"npm i @eclipse-muto/liveui-core @eclipse-muto/liveui-react-native\n")),(0,a.kt)("p",null,"Then we need to create a config that contains shared modules and remote components URLs. You can use ",(0,a.kt)("strong",{parentName:"p"},"liveui init")," command. "),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-js",metastring:'title="liveui.config.host.js"',title:'"liveui.config.host.js"'},"module.exports = {\n    shares: {\n        react: require('react'),\n        'react-native': require('react-native'),\n    },\n    remotes: {\n        header: 'http://localhost:5001/header',\n    }\n}\n")),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},(0,a.kt)("a",{parentName:"strong",href:"../explore#shares"},(0,a.kt)("inlineCode",{parentName:"a"},"shared")),":")," As we described above, we define modules that are used by remote components."),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},(0,a.kt)("a",{parentName:"strong",href:"../explore#remotes"},(0,a.kt)("inlineCode",{parentName:"a"},"remotes")),":")," Define your component names and URLs. "),(0,a.kt)("p",null,"The next step is initializing our LiveUI host config."),(0,a.kt)("p",null,"Import ",(0,a.kt)("inlineCode",{parentName:"p"},"@eclipse-muto/liveui-core")," and the host config in the ",(0,a.kt)("inlineCode",{parentName:"p"},"index.js")," file"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-js",metastring:'title="index.js"',title:'"index.js"'},"import {AppRegistry} from 'react-native';\nimport liveui from '@eclipse-muto/liveui-core';\nimport App from './App';\nimport {name as appName} from './app.json';\nimport config from './liveui.config.host';\n\nliveui.initializeApp(config);\n\nAppRegistry.registerComponent(appName, () => App);\n")),(0,a.kt)("p",null,"Import required ",(0,a.kt)("inlineCode",{parentName:"p"},"RemoteComponent")," within ",(0,a.kt)("inlineCode",{parentName:"p"},"App.js")," file:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-js",metastring:'title="App.js"',title:'"App.js"'},"import React from 'react';\nimport {View} from 'react-native';\nimport RemoteComponent from '@eclipse-muto/liveui-react';\n\nimport Footer from './components/Footer';\n\nconst Header = props => <RemoteComponent name=\"Header\" {...props} />;\n\nconst App = () => {\n  return (\n    <View>\n      <Header title=\"Hello World!\" />\n      <Footer />\n    </View>\n  );\n};\n\nexport default App;\n")),(0,a.kt)("p",null,"We use RemoteComponent as a traditional component in React. We define ",(0,a.kt)("inlineCode",{parentName:"p"},"name")," prop to tell RemoteComponent which component will be used on the host config. Also, you can define ",(0,a.kt)("inlineCode",{parentName:"p"},"url")," prop directly without defining the remote component name."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-js"},'const Header = props => <RemoteComponent url="http://localhost:5001/Header" {...props} />;\n')),(0,a.kt)("p",null,"We changed our monolith frontend app to micro frontend app with LiveUI on the same codebase. For more examples check our ",(0,a.kt)("a",{parentName:"p",href:"https://github.com/composiv/liveui-samples"},"samples repository"),"."))}d.isMDXComponent=!0}}]);