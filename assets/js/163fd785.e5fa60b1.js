"use strict";(self.webpackChunkliveui_website=self.webpackChunkliveui_website||[]).push([[5680],{4137:function(e,n,t){t.d(n,{Zo:function(){return u},kt:function(){return s}});var a=t(7294);function o(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function r(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);n&&(a=a.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,a)}return t}function i(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?r(Object(t),!0).forEach((function(n){o(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):r(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function l(e,n){if(null==e)return{};var t,a,o=function(e,n){if(null==e)return{};var t,a,o={},r=Object.keys(e);for(a=0;a<r.length;a++)t=r[a],n.indexOf(t)>=0||(o[t]=e[t]);return o}(e,n);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(a=0;a<r.length;a++)t=r[a],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(o[t]=e[t])}return o}var p=a.createContext({}),m=function(e){var n=a.useContext(p),t=n;return e&&(t="function"==typeof e?e(n):i(i({},n),e)),t},u=function(e){var n=m(e.components);return a.createElement(p.Provider,{value:n},e.children)},c={inlineCode:"code",wrapper:function(e){var n=e.children;return a.createElement(a.Fragment,{},n)}},d=a.forwardRef((function(e,n){var t=e.components,o=e.mdxType,r=e.originalType,p=e.parentName,u=l(e,["components","mdxType","originalType","parentName"]),d=m(t),s=o,g=d["".concat(p,".").concat(s)]||d[s]||c[s]||r;return t?a.createElement(g,i(i({ref:n},u),{},{components:t})):a.createElement(g,i({ref:n},u))}));function s(e,n){var t=arguments,o=n&&n.mdxType;if("string"==typeof e||o){var r=t.length,i=new Array(r);i[0]=d;var l={};for(var p in n)hasOwnProperty.call(n,p)&&(l[p]=n[p]);l.originalType=e,l.mdxType="string"==typeof e?e:o,i[1]=l;for(var m=2;m<r;m++)i[m]=t[m];return a.createElement.apply(null,i)}return a.createElement.apply(null,t)}d.displayName="MDXCreateElement"},6963:function(e,n,t){t.r(n),t.d(n,{assets:function(){return u},contentTitle:function(){return p},default:function(){return s},frontMatter:function(){return l},metadata:function(){return m},toc:function(){return c}});var a=t(7462),o=t(3366),r=(t(7294),t(4137)),i=["components"],l={id:"command-plugin-by-example",title:"Command Plugin By Example",sidebar_label:"Command Plugin By Example",sidebar_position:1},p=void 0,m={unversionedId:"muto-edge/getting-started/command-plugin-by-example",id:"muto-edge/getting-started/command-plugin-by-example",title:"Command Plugin By Example",description:"In this section, we will quickly describe how to create and get familiar with Muto Command Plugins and their implementation.",source:"@site/docs/muto-edge/getting-started/command-plugin-by-example.md",sourceDirName:"muto-edge/getting-started",slug:"/muto-edge/getting-started/command-plugin-by-example",permalink:"/docs/docs/muto-edge/getting-started/command-plugin-by-example",draft:!1,editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/muto-edge/getting-started/command-plugin-by-example.md",tags:[],version:"current",sidebarPosition:1,frontMatter:{id:"command-plugin-by-example",title:"Command Plugin By Example",sidebar_label:"Command Plugin By Example",sidebar_position:1},sidebar:"mutoSidebar",previous:{title:"Muto By Example",permalink:"/docs/docs/muto-edge/getting-started/by-example"},next:{title:"Dashboard By Example",permalink:"/docs/docs/muto-edge/getting-started/dashboard-by-example"}},u={},c=[{value:"Prerequisites",id:"prerequisites",level:3},{value:"Developing a command plugin",id:"developing-a-command-plugin",level:2},{value:"The Code",id:"the-code",level:2},{value:"Control Logic",id:"control-logic",level:3}],d={toc:c};function s(e){var n=e.components,l=(0,o.Z)(e,i);return(0,r.kt)("wrapper",(0,a.Z)({},d,l,{components:n,mdxType:"MDXLayout"}),(0,r.kt)("p",null,"In this section, we will quickly describe how to create and get familiar with Muto Command Plugins and their implementation."),(0,r.kt)("h3",{id:"prerequisites"},"Prerequisites"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"https://mqttx.app/",title:"Heading link"},"mqttx"),(0,r.kt)("br",null)),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"https://docs.docker.com/engine/install/",title:"Heading link"},"docker"),(0,r.kt)("br",null)),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"https://www.npmjs.com/get-npm/",title:"Heading link"},"npm >= 5"),(0,r.kt)("br",null))),(0,r.kt)("h2",{id:"developing-a-command-plugin"},"Developing a command plugin"),(0,r.kt)("p",null,"Let's start by designing the command."),(0,r.kt)("p",null,"If you navigate to ",(0,r.kt)("inlineCode",{parentName:"p"},"example.yaml")," (see previous example)"),(0,r.kt)("p",null,"We'll add the following section."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-sh"},"plugin: CommandPlugin\n        - name: bcx/rc\n          service: bcx_remotecontrol\n          plugin: CommandPlugin\n")),(0,r.kt)("p",null,(0,r.kt)("em",{parentName:"p"},"Our command is : bcx/rc")),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"Create an empty src folder."),(0,r.kt)("li",{parentName:"ul"},"Clone the bcx ROS package for python into your src folder."),(0,r.kt)("li",{parentName:"ul"},"Add bcx_commandplugin.py")),(0,r.kt)("h2",{id:"the-code"},"The Code"),(0,r.kt)("p",null,(0,r.kt)("em",{parentName:"p"},"If you wish to create your own ",(0,r.kt)("inlineCode",{parentName:"em"},"package"),", you can find the corresponding guide ",(0,r.kt)("a",{parentName:"em",href:"http://wiki.ros.org/ROS/Tutorials/CreatingPackage/",title:"Heading link"},"here"),(0,r.kt)("br",null)),"\n",(0,r.kt)("em",{parentName:"p"},"If you wish to create your own package ",(0,r.kt)("inlineCode",{parentName:"em"},"workspace"),", you can find the corresponding guide ",(0,r.kt)("a",{parentName:"em",href:"http://wiki.ros.org/catkin/workspaces/",title:"Heading link"},"here"),(0,r.kt)("br",null))),(0,r.kt)("p",null,"You can find information regarding the ROS node in ",(0,r.kt)("inlineCode",{parentName:"p"},"package.xml")," and ",(0,r.kt)("inlineCode",{parentName:"p"},"cmake list"),"."),(0,r.kt)("p",null,"If you face any issues, refer to the ROS tutorial above for solutions."),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"--REDACTED--")),(0,r.kt)("p",null,"You can access the entire code ",(0,r.kt)("a",{target:"_blank",href:t(6323).Z},"here")),(0,r.kt)("p",null,"This is the main layout of our code. It's basically a package with a .json payload which includes data such as ",(0,r.kt)("inlineCode",{parentName:"p"},"control type"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"type"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"direction"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"x and y data"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"velocity"),"."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-yaml"},'{\n    "control": "navigator",\n}\n')),(0,r.kt)("p",null,"This plugin reggisters a service named ",(0,r.kt)("inlineCode",{parentName:"p"},"bcx_remotecontrol"),", which should map the string that you set in the example.yaml.  When the plugin recieves a command with the payload that is defined above, it will publish a message to the relevant topic (in this case one of /key, /mux or /drive)."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-py"},"\nif __name__ == '__main__': \n  try:\n    \n    rospy.init_node('bcx_commandplugin')\n    bcx_remotecontrol = rospy.Service(\n            \"bcx_remotecontrol\", muto_srv.CommandPlugin, handle_remotecontrol)\n    pubkey = rospy.Publisher('/key', String, queue_size=1)\n    pubmux = rospy.Publisher('/mux', Int32MultiArray, queue_size=1)\n    drivepub = rospy.Publisher('/drive', AckermannDriveStamped, queue_size=10)\n    rospy.spin()\n    \n  except rospy.ROSInterruptException:\n    pass\n\n")),(0,r.kt)("h3",{id:"control-logic"},"Control Logic"),(0,r.kt)("p",null,"When the plugin receives a command with a payload, it uses the following logic to control the car.  (e.g. control/type/direction etc. in the payload). Control modes and reqiured data types are: "),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"Keyboard : ",(0,r.kt)("inlineCode",{parentName:"li"},"control type")," ",(0,r.kt)("inlineCode",{parentName:"li"},"type")," ",(0,r.kt)("inlineCode",{parentName:"li"},"direction")),(0,r.kt)("li",{parentName:"ul"},"Joystick : ",(0,r.kt)("inlineCode",{parentName:"li"},"control type")," ",(0,r.kt)("inlineCode",{parentName:"li"},"x and y")),(0,r.kt)("li",{parentName:"ul"},"Navigator : Since it's the autopilot mode it doens't require us to send any input data.")),(0,r.kt)("p",null,"You can find additional infomation regarding these control types in the F1Tenth files."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-py"},'if controlType == "keyboard" :\n      msg = Int32MultiArray(data=[0,1,0,0,0,0])\n      pubmux.publish(msg)\n\n  if controlType == "navigator" :\n      msg = Int32MultiArray(data=[0,0,0,0,1,0])\n      pubmux.publish(msg)\n\n  if controlType == "joystick":\n      x = payload["x"]/100.0\n      y = payload["y"]/100.0\n\n  if controlType == "reset" :\n      msg = Int32MultiArray(data=[0,0,0,0,0,0])\n      pubmux.publish(msg)   \n')),(0,r.kt)("p",null,"You can change the desired speed of your vehicle by the following simple formula ( max velocity and steering angle are hardcoded) :"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-py"},"desired_velocity = 7 * y\ndesired_steer = -0.4189 * x\n\n")),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Modes and reqiured data types : ")),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"Keyboard : ",(0,r.kt)("inlineCode",{parentName:"p"},"control type")," ",(0,r.kt)("inlineCode",{parentName:"p"},"type")," ",(0,r.kt)("inlineCode",{parentName:"p"},"direction")," ",(0,r.kt)("inlineCode",{parentName:"p"},"x and y"))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"Joystick : ",(0,r.kt)("inlineCode",{parentName:"p"},"control type")," ",(0,r.kt)("inlineCode",{parentName:"p"},"type")," ",(0,r.kt)("inlineCode",{parentName:"p"},"x and y"))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"Navigator : Since it's the autopilot mode it doens't require us to send any input data."))),(0,r.kt)("p",null,"You can find additional infomation regarding these control types in the F1Tenth files."),(0,r.kt)("p",null,"Now create a dedicated workspace for docker operations. For the sake of this example we'll call that workspace ",(0,r.kt)("inlineCode",{parentName:"p"},"junk"),"."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"mkdir JUNK\ncd JUNK\nmkdir src\n")),(0,r.kt)("p",null,"create a file named : ",(0,r.kt)("inlineCode",{parentName:"p"},"example.launch")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-launch"},'<?xml version="1.0"?>\n<launch>\n\n    <arg name="muto" default="$(dirname)/.." />\n\n    <node pkg="muto_agent" name="muto_agent" type="muto_agent.py" output="screen">\n        <rosparam command="load" file="$(arg muto)/launch/config/muto.yaml" />\n    </node>\n\n    <node pkg="muto_composer" name="muto_composer" type="muto_composer.py" output="screen">\n        <rosparam command="load" file="$(arg muto)/launch/config/muto.yaml" />\n    </node>\n\n\n    <node pkg="muto_composer" name="composer_plugin" type="composer_plugin.py" output="screen">\n        <rosparam command="load" file="$(arg muto)/launch/config/muto.yaml" />\n    </node>\n\n    <node pkg="muto_composer" name="launch_plugin" type="launch_plugin.py" output="screen">\n        <rosparam command="load" file="$(arg muto)/launch/config/muto.yaml" />\n    </node>\n\n    <include file="$(find rosbridge_server)/launch/rosbridge_websocket.launch">\n        <arg name="port" value="7777"/>\n    </include>\n\n    <node pkg="mutoexamples_bcxcommands" name="bcx_commandplugin" type="bcx_commandplugin.py" output="screen">\n    </node>\n\n</launch>\n')),(0,r.kt)("p",null,"create a file named : ",(0,r.kt)("inlineCode",{parentName:"p"},"example.yaml"),"\nCopy the contents of ",(0,r.kt)("inlineCode",{parentName:"p"},"example.yaml")," into it (see previous examples)"),(0,r.kt)("p",null,"within your workspace run "),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-sh"},'docker run --name muto-demo --rm -it \\\n   -v $(pwd)/example.yaml:/home/muto/launch/config/muto.yaml  \\\n   -v $(pwd)/example.launch:/home/muto/launch/example.launch  \\\n   -v $(pwd)/src/mutoexamples_bcxcommands:/home/muto/src/mutoexamples_bcxcommands  \\\n   -p 7777:7777 -p 11311:11311  \\\n   composiv/muto-demo:noetic-ros-base-focal  \\\n   /bin/bash -c "source devel/setup.bash && catkin_make && roslaunch launch/example.launch"\n\n')),(0,r.kt)("p",null,"You should see the confirmation line"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"Connected with result code Success\nSubscribed to:  org.eclipse.muto.sandbox.f1tenth:docs-bcx-01/#\n\n")),(0,r.kt)("p",null,"The ROS workspace in the docker image is /home/muto.\nPlease pay extra attention to the ",(0,r.kt)("inlineCode",{parentName:"p"},"name:")," of our service. It needs to be identical to the name in the ",(0,r.kt)("inlineCode",{parentName:"p"},".yaml")," file.\nWe'll publish data either to ",(0,r.kt)("inlineCode",{parentName:"p"},"/drive"),",",(0,r.kt)("inlineCode",{parentName:"p"},"/key")," or ",(0,r.kt)("inlineCode",{parentName:"p"},"/mux ")," topics depending on the command that this channel recieves."),(0,r.kt)("p",null,"Now execute the steps in ",(0,r.kt)("inlineCode",{parentName:"p"},"Muto by Example")," and continue until this step. Then use MQTTX to send you commands to agent and observe that your vehicle acts accordingly in Foxglove Visualiser."))}s.isMDXComponent=!0},6323:function(e,n,t){n.Z=t.p+"assets/files/bcx_commandplugin-ecbe6644b3b24653405efbe4fdfe18ce.py"}}]);